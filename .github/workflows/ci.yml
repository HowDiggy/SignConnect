name: Python CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"] # Matches pyproject.toml

    services:
      postgres:
        # CORRECTED: Use the same pgvector image as docker-compose
        image: ankane/pgvector
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Run Tests
      env:
        # These credentials must match the 'services' section above
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        # Add all other required secrets/variables for tests
        SECRET_KEY: "a-test-secret-key-for-ci"
        DEBUG: "False"
        GOOGLE_APPLICATION_CREDENTIALS: "false-gcp-credentials.json"
        GEMINI_API_KEY: "fake-gemini-api-key"
        FIREBASE_CLIENT_API_KEY: "fake-gemini-api-key"
        # This is critical for src layout
        PYTHONPATH: src
      run: |
        poetry run pytest
